library IEEE; 
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity clock is
port(
CLK : in STD_LOGIC; -- Vstupní hodiny
reset : in STD_LOGIC; -- Vstupní signál resetu
BTN : in STD_LOGIC; -- Tlačítko pro přepnutí režimu
led : out unsigned(4 downto 0); -- Výstup pro LED (zobrazení blikajících LED)
Dig : out STD_LOGIC_VECTOR(3 downto 0); -- Výstup pro volbu číslice pro 7-segmentový displej
seg : out STD_LOGIC_VECTOR(7 downto 0) -- Výstup pro 7-segmentový displej
);
end clock;

architecture Behavioral of clock is

signal cnt      : unsigned(25 downto 0) := (others => '0');   -- Počítadlo pro zpoždění (1 sekunda)
signal sec_e    : unsigned(3 downto 0) := (others => '0');    -- Jednotkový sekundový čítač
signal sec_d    : unsigned(3 downto 0) := (others => '0');    -- Desetinný sekundový čítač
signal min_e    : unsigned(3 downto 0) := (others => '0');    -- Jednotkový minutový čítač
signal min_d    : unsigned(3 downto 0) := (others => '0');    -- Desetinný minutový čítač
signal hour_e   : unsigned(3 downto 0) := (others => '0');    -- Jednotkový hodinový čítač
signal hour_d   : unsigned(3 downto 0) := (others => '0');    -- Desetinný hodinový čítač

signal mode     : std_logic := '0'; -- 0: režim minut/sekund, 1: režim hodin/minut
signal btn_reg  : std_logic := '0'; -- Registrace tlačítka (antidrebízení)

-- Funkce pro převod čísla na 7-segmentový kód
function f_num_2_7seg (num : in unsigned(3 downto 0)) return std_logic_vector is
    variable seg7 : std_logic_vector(6 downto 0); -- 7-segmentový kód pro zobrazení číslice
begin
    case num is
        when "0000" => seg7 := "1000000"; -- 0
        when "0001" => seg7 := "1111001"; -- 1
        when "0010" => seg7 := "0100100"; -- 2
        when "0011" => seg7 := "0110000"; -- 3
        when "0100" => seg7 := "0011001"; -- 4
        when "0101" => seg7 := "0010010"; -- 5
        when "0110" => seg7 := "0000010"; -- 6
        when "0111" => seg7 := "1111000"; -- 7
        when "1000" => seg7 := "0000000"; -- 8
        when "1001" => seg7 := "0010000"; -- 9
        when others => seg7 := "1111111"; -- Vše vypnuto
    end case;
    return seg7;
end;
begin

process(CLK, reset)
begin
    if reset = '1' then
        -- Pokud je reset aktivní, resetují se všechny hodnoty
        cnt      <= (others => '0');
        sec_e    <= (others => '0');
        sec_d    <= (others => '0');
        min_e    <= (others => '0');
        min_d    <= (others => '0');
        hour_e   <= (others => '0');
        hour_d   <= (others => '0');
        mode     <= '0';
        btn_reg  <= '0';

    elsif rising_edge(CLK) then
        -- Sledování změny stavu tlačítka pro přepnutí režimu (přepínání mezi minutami/sekundami a hodinami/minutami)
        if BTN = '1' and btn_reg = '0' then
            mode <= not mode; -- Přepne režim
        end if;
        btn_reg <= BTN;

        -- Počítání času (sekundy, minuty, hodiny)
        if cnt = to_unsigned(50000000, 26) then -- Počítání jedné sekundy
            cnt <= (others => '0');

            if sec_e = 9 then
                sec_e <= (others => '0');
                if sec_d = 5 then
                    sec_d <= (others => '0');
                    if min_e = 9 then
                        min_e <= (others => '0');
                        if min_d = 5 then
                            min_d <= (others => '0');
                            if hour_d = 2 and hour_e = 3 then
                                -- Resetuje hodiny po 23:59 -> 00:00
                                hour_d <= (others => '0');
                                hour_e <= (others => '0');
                            else
                                if hour_e = 9 then
                                    hour_e <= (others => '0');
                                    hour_d <= hour_d + 1;
                                else
                                    hour_e <= hour_e + 1;
                                end if;
                            end if;
                        else
                            min_d <= min_d + 1; -- Inkrementace minut
                        end if;
                    else
                        min_e <= min_e + 1; -- Inkrementace minut
                    end if;
                else
                    sec_d <= sec_d + 1; -- Inkrementace sekund
                end if;
            else
                sec_e <= sec_e + 1; -- Inkrementace sekund
            end if;

        else
            cnt <= cnt + 1; -- Inkrementace počítadla pro každý cyklus
        end if;

        -- Ovládání 7-segmentového displeje (které číslice jsou zobrazeny)
        case to_integer(unsigned(cnt(17 downto 16))) is
            when 0 =>
                Dig <= "1000"; -- První číslice (nejpravější)
                if mode = '0' then
                    seg <= '1' & f_num_2_7seg(sec_e); -- Zobrazení jednotkové sekundy
                else
                    seg <= '1' & f_num_2_7seg(min_e); -- Zobrazení minut v režimu hodin/minut
                end if;

            when 1 =>
                Dig <= "0100"; -- Druhá číslice
                if mode = '0' then
                    seg <= '1' & f_num_2_7seg(sec_d); -- Zobrazení desítkové sekundy
                else
                    seg <= '1' & f_num_2_7seg(min_d); -- Zobrazení desítkových minut
                end if;

            when 2 =>
                Dig <= "0010"; -- Třetí číslice
                if mode = '0' then
                    seg <= '1' & f_num_2_7seg(min_e); -- Zobrazení jednotkových minut
                else
                    seg <= '1' & f_num_2_7seg(hour_e); -- Zobrazení jednotkových hodin
                end if;

            when 3 =>
                Dig <= "0001"; -- Čtvrtá číslice
                if mode = '0' then
                    seg <= '1' & f_num_2_7seg(min_d); -- Zobrazení desítkových minut
                else
                    seg <= '1' & f_num_2_7seg(hour_d); -- Zobrazení desítkových hodin
                end if;

            when others =>
                Dig <= "0000"; -- Vypne všechny číslice
                seg <= (others => '1'); -- Vypne všechny segmenty
        end case;
    end if;
end process;

-- LED indikátory pro blikání pro vizuální efekt
led <= cnt(25 downto 21); -- Výběr bitů pro LED z počítadla
end Behavioral;
